                                    ###    User documentation.  ###

                                                I Overview

prographing progect (hereinafter PPProject or PPP) is a graphical programming environment in which 
code is represented as blocks of various types and arrows (dependency links) between them. As 
conceived by the authors, PPPorgect is intended to simplify the development of software products 
containing complex logical connections and dependencies between parts of the code by visualizing 
these connections.
* currently only supported by the python programming language.

When the execution of the program of the main module (main.py) starts, a window appears with a 
panel above it.
____________________________________________________________________________________________________

                                              II Panel buttons

1.new
creates a new blank canvas, first prompting you to save the open file. 

2.open
opens an already saved file in the (.vrc) format, that is, a logical graph previously created using
PPProject

3.save
saves the modified logical graph in the (.vrc) format, that is, in a format suitable for further 
development in the PPP environment, under the same name and in the old directory.

4.save as
saves the created or modified logical graph in the (.vrc) format, that is, in a format suitable for 
further development in the PPP environment, under the specified name in the specified directory.

5.build
exports a file, that is, allows you to create a file with the code build_file.py, which contains the
code into which the logical graph is converted. file is ready to run

6.build as
similar to build, only allows you to choose the name of the file and the directory where to put it.
___________________________________________________________________________________________________


                                          III Working with canvas

1.Double click the left mouse button
creates a new block of untitled type, if clicked in an empty space, or opens a window for working 
with the block, if clicked on the block.

2.Move with the left mouse button pressed
allows you to move blocks around the canvas or move canvas itself.

3.Move with the right mouse button pressed
allows you to create arrows between blocks (directed edges in a graph)

4.Double click with the mouse wheel
allows you to remove arrows and blocks. when you click on a block, you need to confirm its deletion.

5.mouse wheel spin
adjusts the image scale
Working with blocks
____________________________________________________________________________________________________

                                              IV  Type of block

When you click on a block, a field for working with it opens. first you will be asked what type of 
block. types of blocks will be described later, but you can write op - sequential execution, and do 
whatever you want with it.
____________________________________________________________________________________________________


                                               V content editor

after entering the block type, the block editing window opens, where you can write code. further, 
this code will be contained in the block and, when exported, will be written to the final file 
conversion to code.
during export, the first previously unprocessed block is taken from top to bottom from left to right 
and moved to the resulting file. any block is followed in order from top to bottom from left to
right by its child blocks (those to which it points with an arrow).
* note that if block C is referenced by two different blocks A and B, then the text of block C (and 
all its children) will appear twice in the final file. therefore, we do not recommend referencing 
the same block twice
** loops are not allowed (i.e. references like A => B => C => A)
____________________________________________________________________________________________________

                                                VI block types

1.op
sequential execution

2.if
intended for logical branching. it is proposed that two dependent blocks exit from it, the first of which will be "then" and the other "else". the content of the if block will be converted to the string if <block content>:
#to be continued

3.else
should come after "if" on the same level(depending on the same perent)
the content of the block will be converted to else: <block content>

4.empty
empty block, for technical purposes
no content

5.for
represents a for loop
converts content to for <var> in <range>:

6.class
for class description
converts content to class <name> (<supers>):

7.fun
describes the functions
converts content to def <name> (<params>):
____________________________________________________________________________________________________

                                                    Appendix
PPProject was initiated as a term project of the first-year students at DGAP MIPT, 2020.
Authors: Denis S Katkov, Denis Ballakh
Contact us: denis.s.katkov@gmail.com
