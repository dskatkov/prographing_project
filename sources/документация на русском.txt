Пользовательская документация.

В данный момент программа работает только на ОС Windows

prographing progect (далее GP) - среда графического программирования, в которой код представляется в виде блоков различных типов и стрелок(связей зависимости) между ними. По замыслу авторов, GP призван упростить разработку програмных продуктов, содержащих сложные логические связи и зависимости между частями кода, при помощи визуализации этих связей.
*на данный момент поддерживается только язык программирования python.

При запуске исполнения программы главного модкля(main.py) возникает окно с панелью над ним.

Кнопки панели

1.new
создает новый пустой холст, предварительно предлагая сохранить открытый файл. Автоматическое название файла - "new file.vrc"

2.open
открывает уже сохраненный файл в формате (.vrc), то есть ранее созданный с помощью GP логический граф

3.save
сохраняет измененный логический граф в формате (.vrc), то есть в формате, подходящем для дальнейшей разработке в среде GP, под прежним именем и в прежней директории.

4.save as
сохраняет созданный или измененный логический граф в формате (.vrc), то есть в формате, подходящем для дальнейшей разработке в среде GP, под заданным именем в заданной директории.

5.build
экспортирует файл, то есть позволяет создать файл с кодом build_file.py, в котором содержится код, в который преобразован логический граф. файл готов к запуску

6.build as
аналогично build, только позволяет выбрать название файла и директорию, куда его поместить.

Работа с холстом

1.Двойное нажатие левой кнопки мыши 
создает новый блок типа untitled, если нажато в пустое место, или открывает окно работы с блоком, если нажато на блок.

2.движение с зажатой левой кнопкой мыши
позволяет создавать стрелочки между блоками(направленый ребра в графе)

3.движение с зажатой правой кнопкой мыши
позволяет перемещать блоки по холсту

4.двойное нажатие колесом мыши
позволяет удалять стрелочки и блоки. при нажатии на блок необходимо подтверждение его удаления.

5.кручение колеса мыши 
регулирует масштаб изображения

Работа с блоками

тип
При нажатии на блок открывается поле работы с ним. для начала вас спросят какого типа блок. типы блоков будут описаны далее, но можно написать op - последовательное выполнение, и делать с ним далее что угодно.


редактор содержимого
после ввода типа блока открывается окно редактирования блока, куда можно писать код. далее этот код будет содержаться в блоке и при экспортировании будет записан в итоговый файл

преобразование в код.
при экспорте берется сверху вниз слева направо первый ранее не обработаный блок и перемещается в итоговый файл. за любым блоком по порядку сверху вниз слева направо идут его дочерние блоки(те, в которые он указывает стрелкой).
*заметьте, что если на блок C ссылаются два разных блока A и B, то в итоговом файле текст блока C (и всех его дочерних) будет присутствовать дважды. поэтому дважды ссылаться на один блок мы не рекомендуем
**циклы запрещены (то есть ссылки типа A=>B=>C=>A)

типы блоков

1. op
последовательное исполнение

2.if
предназначен для логического ветсвления. предлагается чтобы из него выходило два зависимых блока, первый из которых будет "op" а другой "else". 
содержимое блока if будет преобразовано в строку if <содержимое блока> :

3.else
предполагается что идет после if 
содержимое блока будет преобразовано в else: <содержимое блока>

4.empty
пустой блок, для технических целей
содержимого нет

5.for
представляет цикл for
преобразует содержимое в for <var> in <range>:

6.class
для описания классов
преобразует содержимое в class <name>(<supers>):

7.fun
описывает функции
преобразует содержимое в def <name>(<params>):